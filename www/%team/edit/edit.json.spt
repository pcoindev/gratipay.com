from aspen import Response

from gratipay.utils import get_team
from gratipay.utils.images import (
    imgize,
    ImageTooLarge,
    InvalidImageType,
    UnknownImageError
)

[----------------------------------------------------------------------------]

def valid_url(url):
    return any(map(url.lower().startswith, ('http://', 'https://')))

request.allow('POST')

field_names = {
    'name': 'Team Name',
    'image': 'Image',
    'product_or_service': 'Product or Service',
    'homepage': 'Homepage',
    'onboarding_url': 'Self-onboarding Documentation URL',
}

if user.ANON:
    raise Response(401, _("You need to log in to access this page."))

team = get_team(state)

if not user.ADMIN and user.participant.username != team.owner:
    raise Response(403, _("You are not authorized to access this page."))

if team.is_closed:
    raise Response(403, _("You can't edit a closed team."))

if team.is_approved is False: # for teams under review, is_approved is None.
    raise Response(403, _("You can't edit a rejected team."))

data = request.body
fields = {}
image = None

for field in data.keys():
    if field in field_names:
        if field == 'image':
            image = data[field].value  # file upload
            image_type = data[field].type
            if image and image_type not in ('image/png', 'image/jpeg'):
                raise Response(400, _("Please upload a PNG or JPG image."))
        else:
            value = data.get(field, '').strip(' ')
            if not value:
                raise Response(400, _("Please fill out the '{}' field.", field_names[field]))

            if field == 'homepage' and not valid_url(value):
                raise Response(400,
                    _( "Please enter an http[s]:// URL for the '{}' field."
                                     , field_names[field]
                                      ))
            fields[field] = value

if image:
    try:
        large, small = imgize(image, image_type)
    except ImageTooLarge:
        raise Response(400, _("Please upload an image smaller than 100 kB."))
    except InvalidImageType:
        raise Response(400, _("Please upload a PNG or JPG image."))
    except UnknownImageError:
        raise Response(500, _("Sorry, there was a problem saving your image. Please try again."))
    else:
        team.save_image(image, large, small, image_type)

if fields:
    team.update(**fields)

[---] application/json via json_dump
team.to_dict()
